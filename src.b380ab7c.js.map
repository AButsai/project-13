{"version":3,"sources":["js/refs/getRefs.js","js/header/header.js","js/load_spinner/load-spinner.js","json/genres/genres.json","js/card-templayte/card-templayte.js","index.js"],"names":["getRefs","homeLink","document","querySelectorAll","homeLinkCurrent","querySelector","libraryLink","libraryWatched","libraryQueue","form","header","buttons","cardslist","spinner","closeModalBtn","backdrop","modal","handleClickHome","classList","remove","add","handleClickLibrary","libraryWatchedColor","libraryQueueColor","forEach","link","addEventListener","spinnerIsOn","setTimeout","module","exports","id","name","changeGenresIdForName","films","filmsInfo","map","film","filmWithGenres","genres","original_title","overview","popularity","poster_path","release_date","title","vote_average","vote_count","genre_ids","includes","push","correctGenres","createFilmsList","length","splice","renderFilmCard","undefined","slice"],"mappings":"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","file":"src.b380ab7c.js","sourceRoot":"../src","sourcesContent":["function getRefs() {\n  return {\n    // Header\n    homeLink: document.querySelectorAll('[data-home]'),\n    homeLinkCurrent: document.querySelector('[data-curr]'),\n    libraryLink: document.querySelector('[data-library]'),\n    libraryWatched: document.querySelector('[data-watched]'),\n    libraryQueue: document.querySelector('[data-queue]'),\n    form: document.querySelector('.form'),\n    header: document.querySelector('.header'),\n    buttons: document.querySelector('.library'),\n    // Main\n    cardslist: document.querySelector('.films-grid'),\n    //Spinner\n    spinner: document.querySelector('.load-spinner'),\n    //Modal\n    closeModalBtn: document.querySelector('.closeModal'),\n    backdrop: document.querySelector('.backdrop'),\n    modal: document.querySelector('.modal'),\n  };\n}\n\nexport default getRefs;\n","import getRefs from '../refs/getRefs.js';\n\nconst { homeLink, libraryLink, libraryWatched, libraryQueue, form, header, buttons, homeLinkCurrent, } = getRefs();\n\nconst handleClickHome = () => {\n  form.classList.remove('hidden');\n  header.classList.remove('header-library');\n  buttons.classList.add('hidden');\n  libraryLink.classList.remove('current');\n  homeLinkCurrent.classList.add('current');\n};\n\nconst handleClickLibrary = () => {\n  form.classList.add('hidden');\n  header.classList.add('header-library');\n  buttons.classList.remove('hidden');\n  libraryLink.classList.add('current');\n  homeLinkCurrent.classList.remove('current');\n};\n\nconst libraryWatchedColor = () => {\n  libraryWatched.classList.add('active');\n  libraryQueue.classList.remove('active');\n};\n\nconst libraryQueueColor = () => {\n  libraryWatched.classList.remove('active');\n  libraryQueue.classList.add('active');\n};\n\nhomeLink.forEach(link => {\n  link.addEventListener('click', handleClickHome);\n});\nlibraryLink.addEventListener('click', handleClickLibrary);\n\nlibraryWatched.addEventListener('click', libraryWatchedColor);\nlibraryQueue.addEventListener('click', libraryQueueColor);\n","import getRefs from '../refs/getRefs';\nconst { spinner } = getRefs();\n\n//SpinnerIsOn\nfunction spinnerIsOn() {\n  spinner.classList.remove('hidden');\n  spinner.classList.add('isOn');\n\n  // Таймаут на продолжительность работы спиннера\n  setTimeout(() => {\n    spinner.classList.remove('isOn');\n    spinner.classList.add('hidden');\n  }, 700);\n}\n","module.exports=[{id:28,name:\"Action\"},{id:12,name:\"Adventure\"},{id:16,name:\"Animation\"},{id:35,name:\"Comedy\"},{id:80,name:\"Crime\"},{id:99,name:\"Documentary\"},{id:18,name:\"Drama\"},{id:10751,name:\"Family\"},{id:14,name:\"Fantasy\"},{id:36,name:\"History\"},{id:27,name:\"Horror\"},{id:10402,name:\"Music\"},{id:9648,name:\"Mystery\"},{id:10749,name:\"Romance\"},{id:878,name:\"Science Fiction\"},{id:10770,name:\"TV Movie\"},{id:53,name:\"Thriller\"},{id:10752,name:\"War\"},{id:37,name:\"Western\"}];","import genresJSON from '../../json/./genres/genres.json';\n// import createFilmsList from '.././library/library';\nimport getRefs from '../refs/getRefs';\n// const { cardslist } = getRefs();\n\n// принимает  responce.results\nexport const changeGenresIdForName = function(films) {\n  let filmsInfo = [];\n  films.map(film => {\n    const filmWithGenres = {\n      genres: [],\n      id: film.id,\n      original_title: film.original_title,\n      overview: film.overview,\n      popularity: film.popularity,\n      poster_path: film.poster_path,\n      release_date: film.release_date,\n      title: film.title,\n      vote_average: film.vote_average,\n      vote_count: film.vote_count,\n    };\n\n    genresJSON.map(({ id, name }) => {\n      if (film.genre_ids.includes(id)) {\n        filmWithGenres.genres.push(name);\n      }\n    });\n    filmsInfo.push(filmWithGenres);\n  });\n  correctGenres(filmsInfo);\n  createFilmsList(filmsInfo);\n};\n\nfunction correctGenres(filmsInfo) {\n  filmsInfo.map(film => {\n    if (film.genres.length > 2) {\n      film.genres.splice(2, 5, 'Other');\n    }\n    return film.genres;\n  });\n}\n\n// кусок кода Елены\n// --------------------------------------\n// export const createFilmsList = function(films) {\n//   const markup = films.map(film => renderFilmCard(film)).join('');\n//   getRefs().cardslist.insertAdjacentHTML('beforeend', markup);\n// };\n// --------------------------------------\n\nexport const renderFilmCard = function(film) {\n  const urlImg = 'https://image.tmdb.org/t/p/w500';\n\n  return `<li class=\"film-card\">\n    <a href=\"\">\n        <img src=\"${urlImg}${film.poster_path}\" alt=\"${film.title}\" data-index = ${film.id}>\n        <h2>${film.title}</h2>\n        <p>${film.genres}\n        | ${film.release_date !== undefined ? film.release_date.slice(0, 4) : ''}</p>             \n        <p>${film.vote_average}</p>\n    </a>\n        </li>`;\n};\n","import './sass/main.scss';\nimport './js/header/header.js';\nimport './js/load_spinner/load-spinner.js';\n// import renderFilmCard from './js/card-templayte/card-templayte';\nimport getRefs from './js/refs/getRefs';\nimport onCardFilmClick from './js/modal-templayte/modal-open';\nimport { renderFilmCard } from './js/card-templayte/card-templayte.js';\n// Для теста:\n\n// 1)запрос на популярные фильмы\n\n// const fetchPopFilms = async () => {\n//   const response = await fetch(\n//     'https://api.themoviedb.org/3/movie/popular?api_key=81d06652aef7420f17f98b937386a748&language=en-US&page=1',\n//   );\n//   const films = await response.json();\n//   return films;\n// };\n\n// fetchPopFilms().then(response => {\n//   createFilmsList(response.results);\n//   console.log(response);\n// });\n// console.log('worked');\n\n// 2)запрос на полную информацию о фильме, по индексу\n\n// const fetchForModal = async (currentCardIndex) =>{\n//     const response =  await fetch(`https://api.themoviedb.org/3/movie/${currentCardIndex}?api_key=81d06652aef7420f17f98b937386a748&language=en-US`);\n//     const film = await response.json();\n//     return film;\n// }\n"]}